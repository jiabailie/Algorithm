/*
 * Reference: community.topcoder.com/longcontest/?module=ViewProblemStatement&compid=34370&rd=15825
 * Test tool: www.topcoder.com/contest/problem/ColorLinker/manual.html
 * Debug call: java -jar ColorLinkerVis.jar -exec clab.exe -seed 1
 */
#include <cstdio>
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>

using namespace std;

const int MAX = 61;
const int MAX_COLOR = 5;

int cur = 0;
int cnt = 0;
int gridSize = 0;
int penalty = 0;
int ret[MAX * MAX * MAX_COLOR * 3];

char grid[MAX][MAX] ;/*= {
"-------------------------------------------------3---------2",
"--------------2---------------2-----------------------------",
"-----------------------------------0----------------------2-",
"------------------------------------------------2-----------",
"----------------2-------------------3----------------1------",
"-------------2-------------------------------------1--------",
"-----------------------------------------------------2------",
"3------------------------------2----------------------------",
"-3-------------0----2-------------------------2----2--------",
"--------------2---------------------0-----------------------",
"------------------------------------------------------------",
"-------------------1----------------------------------------",
"------------------------------------------------------------",
"---------3--------2-----------------------------------------",
"---------------------1--------------------------------------",
"1------------------3-----------2------------2---------------",
"------------------------------------------------------------",
"---------1--------------------------------------------------",
"------0-----------------------------------------------------",
"3----------------------------------------------------------0",
"--------1-2-------------------------------------------------",
"------------------------------------------------------------",
"--------1-------------3-------------------------------------",
"--------------------------------------------------2----3----",
"----------------------------------------------3-------------",
"------------------------------------------------------------",
"-----------------------------------1------------------------",
"------1-----------------------------------------------------",
"------------------------------------------------------3-----",
"---------------------------------------------2------------3-",
"------------------------------2-----------------------------",
"-----------------1-----------------------------2------------",
"----------------2---0---------------------------------------",
"------------------------------------------------------------",
"-------------------3---------2------------------------------",
"----------3-----------------------------------------2--1--0-",
"----------------1-----------------2-------------------------",
"--------------------------------------------------------2---",
"------------------0------------------------------3----------",
"-------------2----------------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"---------------------4------2-------1-----------------------",
"------------------------------------------------------------",
"---------------------------------------1--------------------",
"---------------------------2-------------------3------------",
"----------------------3-------------------------------------",
"-----------2---------------------------------------2--------",
"------------------------------------------------------------",
"------------------4----------------------------4-----1------",
"-------3-3-------0------------------------------------------",
"---------------------------------------1-------3------------",
"--------------0---------------------------------------------",
"---------------------2--------------------------------------",
"------------------------------------------------------------",
"------------------------------------------------------------",
"------------0-----------------------------------------------",
"---------------------------------------------------1--------",
"------------------------3-----------------------------------",
"---------------------22-------------------------------------"
};*/

struct point
{
	int x;
	int y;
	point(int _x, int _y) : x(_x), y(_y) {}
	point(const point& _point) : x(_point.x), y(_point.y){}
	point& operator=(const point& _point)
	{
		this->x = _point.x;
		this->y = _point.y;
		return *this;
	}
	~point(){}
};

map<int, vector<point> > statis;

int main()
{
	int i = 0;
	int j = 0;

	memset(grid, 0, sizeof(grid));
	memset(ret, 0, sizeof(ret));

	scanf("%d", &gridSize);
	scanf("%d", &penalty);

	for(i = 0; i < gridSize; i++)
	{
		scanf("%s", grid[i]);
	}

	for(i = 0; i < gridSize; i++)
	{
		for(j = 0; j < strlen(grid[i]); j++)
		{
			if(grid[i][j] != '-')
			{
				statis[(grid[i][j] - '0')].push_back(point(i, j));
				cnt++;
			}
		}
	}

	printf("%d\n", cnt * 3);

	for(map<int, vector<point> >::iterator imap = statis.begin(); imap != statis.end(); imap++)
	{
		for(vector<point>::iterator it = imap->second.begin(); it != imap->second.end(); it++)
		{
			printf("%d\n%d\n%d\n", it->x, it->y, imap->first);
		}
	}

	return 0;
}
